name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: urlshortener_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        go mod download
        cd frontend && npm ci

    - name: Run Go tests
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/urlshortener_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run Frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Security scan with Gosec
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
      continue-on-error: true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif
      if: always()

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54
        args: --timeout=5m

    - name: Run Frontend linting
      run: |
        cd frontend
        npm ci
        npm run lint
        npm run type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        cp -r .next/static ./static/
        cp .next/server/app/page.js ./static/index.js 2>/dev/null || true

    - name: Build Go application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/server

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          main
          frontend/static/
        retention-days: 7

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name urlshortener-staging --region us-east-1

    - name: Deploy to staging
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|PLACEHOLDER_IMAGE|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop|g" k8s/staging/*.yaml
        
        # Apply configurations
        kubectl apply -f k8s/staging/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/urlshortener-api -n staging --timeout=600s
        kubectl rollout status deployment/urlshortener-frontend -n staging --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run basic health check
        STAGING_URL=$(kubectl get ingress urlshortener-ingress -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f https://${STAGING_URL}/health || exit 1
        
        # Run API tests
        npm install -g newman
        newman run tests/postman/api-tests.json --env-var "base_url=https://${STAGING_URL}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name urlshortener-production --region us-east-1

    - name: Blue-Green Deployment
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|PLACEHOLDER_IMAGE|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main|g" k8s/production/*.yaml
        
        # Deploy to green environment
        kubectl apply -f k8s/production/ --namespace=green
        
        # Wait for rollout
        kubectl rollout status deployment/urlshortener-api -n green --timeout=600s
        kubectl rollout status deployment/urlshortener-frontend -n green --timeout=600s
        
        # Run health checks
        kubectl wait --for=condition=ready pod -l app=urlshortener-api -n green --timeout=300s
        
        # Switch traffic to green
        kubectl patch service urlshortener-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Cleanup old blue environment after successful deployment
        sleep 60
        kubectl delete all -l version=blue -n production --ignore-not-found=true

    - name: Post-deployment tests
      run: |
        # Run comprehensive tests
        PROD_URL=$(kubectl get ingress urlshortener-ingress -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health check
        curl -f https://${PROD_URL}/health
        
        # Performance test
        npm install -g artillery
        artillery run tests/performance/load-test.yml --target https://${PROD_URL}

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name urlshortener-production --region us-east-1

    - name: Rollback deployment
      run: |
        # Switch back to blue environment
        kubectl patch service urlshortener-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # Verify rollback
        kubectl get pods -n production
        
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: '🚨 Production deployment failed and was rolled back automatically'