version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=urlshortener
      - DB_PASSWORD=${DB_PASSWORD:-securepassword}
      - DB_NAME=urlshortener_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ID=1
      - BASE_URL=${BASE_URL:-http://localhost:8080}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - urlshortener

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: urlshortener_db
      POSTGRES_USER: urlshortener
      POSTGRES_PASSWORD: ${DB_PASSWORD:-securepassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../configs/database.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U urlshortener -d urlshortener_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - urlshortener

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - urlshortener

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - urlshortener

volumes:
  postgres_data:
  redis_data:

networks:
  urlshortener:
    driver: bridge